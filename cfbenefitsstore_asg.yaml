---
Parameters:
  PublicSubnetID:
    Description: 'The IDs of the public subnet to be used for the ALB'
    Type: AWS::EC2::Subnet::Id
  VPCId:
    Description: 'The VPC ID to be used for deployment'
    Type: AWS::EC2::VPC::Id

Resources:
  MyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Name: benefitsstore-alb
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref MyALBSecurityGroup
      Subnets: 
        - !Ref PublicSubnetID
  
  MyALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - TargetGroupArn: !Ref MyALBTG
          Type: forward
      LoadBalancerArn: !Ref MyALB
      Port: 80
      Protocol: HTTP

  MyALBTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      IpAddressType: ipv4
      Name: benefitsstore-tg
      Port: 80
      Protocol: HTTP
      ProtocolVersion: String
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: String

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: 
        Fn::GetAZs: 
          Ref: "AWS::Region"
      LaunchConfigurationName:
        Ref: LaunchConfig
      DesiredCapacity: '3'
      MinSize: '1'
      MaxSize: '4'
      TargetGroupARNs:
      - !Ref MyALBTG
    CreationPolicy:
      ResourceSignal:
        Count: '3'
        Timeout: PT15M

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [EC2AmiIds, !Ref AWS::Region, "ImageId"]
      InstanceType: t2.micro
      UserData:
        Fn::Base64: |
          #!/bin/bash -xe
          sudo yum update -y
          sudo yum install git -y
          cd /home/ec2-user
          sudo -u ec2-user git clone https://github.com/ivanbok/benefitsstore.git
          pip3 install Django
          pip3 install djangorestframework
          pip3 install djoser
          python3 benefitsstore/manage.py runserver 0.0.0.0:80 &
      SecurityGroups: 
      - !Ref MyEC2SecurityGroup

  MyEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow SSH and HTTP'
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 22
        ToPort: 22
        IpProtocol: tcp
      - SourceSecurityGroupId: !Ref MyALBSecurityGroup
        FromPort: 80
        ToPort: 80
        IpProtocol: tcp

  MyALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow HTTP from internet'
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        ToPort: 80
        IpProtocol: tcp


Outputs:
  EC2SecurityGroup:
    Description: "Security Group Description"
    Value: !Ref MyEC2SecurityGroup
    Export: 
      Name: EC2SecurityGroup

Mappings:
  EC2AmiIds:
    ap-southeast-1:
      "ImageId": ami-0dc5785603ad4ff54
    ap-southeast-2:
      "ImageId": ami-0bd2230cfb28832f7
    ap-northeast-1:
      "ImageId": ami-0218d08a1f9dac831

Conditions:
  DemoCondition: !Equals [ "ap-southeast-1", !Ref AWS::Region ]
